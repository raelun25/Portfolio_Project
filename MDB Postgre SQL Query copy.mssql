--This is Raekwon Lunkin first SQL project using postgre SQL. He will be analyzing Music store Data using SQL.
--Raekwon only completed Easy questions and Moderate Querstions.

--QUESTION SET 1: EASY
--Q1: who is the senior most employee based on job title?

Select * from Employee
Order by levels desc
Limit 1

--Q2: Which countries have the most invoices?

SELECT Count (*) as c, billing_country 
FROM invoice
Group by billing_country
Order by c DESC

--Q3: What are the top 3 values of total invoice?

Select total from invoice
Order by total DESC
limit 3

--Q4 :Which city has the best customers? We would like to throw a promotional music festival in the 
--city we made the most money. Write a query that returns one city that has the highest sum of invoice totals. 
--return both city name and sum of all invoice totals.

Select sum (total) as invoice_total, billing_city 
From invoice
group by billing_city
order by invoice_total DESC 

--Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer.
--write a query that returns the person who has spent the most money.

Select customer.customer_id, customer.first_name, customer.last_name, sum(invoice.total) as total
from customer
Join invoice ON customer.customer_id = invoice.customer_id
group by customer.customer_id
order by total DESC
Limit 1

--QUESTION SET 2: MODERATE

--Q1: write a query to return the email, first name, last name, & genre of all rock music listeners. 
--return your list ordered alphabetically by email starting with A.

Select Distinct email, first_name, last_name
from customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
WHERE track_id IN(
	SELECT track_id FROM track
	JOIN genre ON track.genre_id = genre.genre_id
	Where genre.name = 'Rock')
ORDER BY email;

--Q2 Lets invite the artists who have written the most rock music in our dataset. 
--Write a query that returns the artist name and total track count of the top 10 rock bands.

SELECT artist.artist_id, artist.name, COUNT(artist.artist_id) AS number_of_songs
FROM track
JOIN album ON album.album_id = track.album_id
JOIN artist ON artist.artist_id = album.artist_id
JOIN genre ON genre.name LIKE 'Rock'
GROUP BY artist.artist_id
Order by number_of_songs DESC
Limit 10

--Q3: return all the track names that have a song length longer than the average song length. 
--Return the name and miliseconds for each track. Order by the song length with the longest songs listed first.

Select name, milliseconds
From track
WHERE milliseconds > (
	SELECT AVG (milliseconds) AS avg_track_length --creating avg millisecond per track
	FROM track)
Order by milliseconds DESC; --ordered length of song from longest to shortest

